name: Changelog

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
    paths-ignore:
      - 'CHANGELOG.md'
      - '.github/workflows/build.yml'
      - '.github/workflows/release.yml'
      - 'README.md'
  workflow_dispatch:
    inputs:
      from_tag:
        description: 'Generate changelog from tag (leave empty for auto-detect)'
        required: false
        type: string
      to_ref:
        description: 'Generate changelog to ref (default: HEAD)'
        required: false
        default: 'HEAD'
        type: string

jobs:
  update-changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Get current version
        id: version
        run: |
          # Try to get version from gradle.properties or use git tag
          if [ -f gradle.properties ]; then
            VERSION=$(grep "pluginVersion" gradle.properties | cut -d'=' -f2 | tr -d ' ')
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          fi
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          
          # Get the latest tag for comparison
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Generate Changelog Section
        id: changelog
        run: |
          # Determine the range for changelog generation
          FROM_TAG="${{ github.event.inputs.from_tag }}"
          TO_REF="${{ github.event.inputs.to_ref || 'HEAD' }}"
          
          if [ -z "$FROM_TAG" ]; then
            FROM_TAG="${{ steps.version.outputs.latest_tag }}"
          fi
          
          # Create temporary changelog
          TEMP_CHANGELOG="temp_changelog.md"
          
          if [ -n "$FROM_TAG" ] && [ "$FROM_TAG" != "HEAD" ]; then
            echo "Generating changelog from $FROM_TAG to $TO_REF"
            # Generate changelog for the range
            conventional-changelog -p angular -r 2 --tag-prefix="" > $TEMP_CHANGELOG
          else
            echo "Generating full changelog"
            conventional-changelog -p angular -i CHANGELOG.md -s --tag-prefix=""
          fi
          
          # Check if there are new changes
          if [ -s "$TEMP_CHANGELOG" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Changelog with Git Log (Fallback)
        if: steps.changelog.outputs.has_changes == 'false'
        run: |
          # Fallback: Use git log to create changelog if conventional-changelog doesn't find changes
          FROM_TAG="${{ steps.version.outputs.latest_tag }}"
          
          if [ -n "$FROM_TAG" ]; then
            RANGE="$FROM_TAG..HEAD"
          else
            # If no tags exist, get last 20 commits
            RANGE="HEAD~20..HEAD"
          fi
          
          echo "# Changelog" > temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Get current date
          CURRENT_DATE=$(date +"%Y-%m-%d")
          NEXT_VERSION="${{ steps.version.outputs.current_version }}"
          
          echo "## [$NEXT_VERSION] - $CURRENT_DATE" >> temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Process commits by type
          git log $RANGE --pretty=format:"%h|%s|%an|%ad" --date=short | while IFS='|' read hash subject author date; do
            # Categorize commits
            case "$subject" in
              feat*|feature*)
                echo "### üöÄ Features" >> temp_features.md 2>/dev/null || echo "### üöÄ Features" > temp_features.md
                echo "- $subject ([$hash](https://github.com/${{ github.repository }}/commit/$hash))" >> temp_features.md
                ;;
              fix*|bugfix*)
                echo "### üêõ Bug Fixes" >> temp_fixes.md 2>/dev/null || echo "### üêõ Bug Fixes" > temp_fixes.md
                echo "- $subject ([$hash](https://github.com/${{ github.repository }}/commit/$hash))" >> temp_fixes.md
                ;;
              docs*)
                echo "### üìö Documentation" >> temp_docs.md 2>/dev/null || echo "### üìö Documentation" > temp_docs.md
                echo "- $subject ([$hash](https://github.com/${{ github.repository }}/commit/$hash))" >> temp_docs.md
                ;;
              style*)
                echo "### üé® Style" >> temp_style.md 2>/dev/null || echo "### üé® Style" > temp_style.md
                echo "- $subject ([$hash](https://github.com/${{ github.repository }}/commit/$hash))" >> temp_style.md
                ;;
              chore*|ci*)
                echo "### üßπ Chore" >> temp_chore.md 2>/dev/null || echo "### üßπ Chore" > temp_chore.md
                echo "- $subject ([$hash](https://github.com/${{ github.repository }}/commit/$hash))" >> temp_chore.md
                ;;
              *)
                echo "### üîÑ Other Changes" >> temp_other.md 2>/dev/null || echo "### üîÑ Other Changes" > temp_other.md
                echo "- $subject ([$hash](https://github.com/${{ github.repository }}/commit/$hash))" >> temp_other.md
                ;;
            esac
          done
          
          # Combine all sections
          for file in temp_features.md temp_fixes.md temp_docs.md temp_style.md temp_chore.md temp_other.md; do
            if [ -f "$file" ]; then
              echo "" >> temp_changelog.md
              cat "$file" >> temp_changelog.md
              rm "$file"
            fi
          done
          
          echo "" >> temp_changelog.md

      - name: Prepend to existing CHANGELOG.md
        run: |
          if [ -f temp_changelog.md ]; then
            if [ -f CHANGELOG.md ]; then
              # Backup existing changelog
              cp CHANGELOG.md CHANGELOG.md.bak
              
              # Check if this is a conventional changelog format
              if grep -q "## \[Unreleased\]" CHANGELOG.md; then
                # Insert after unreleased section
                sed '/## \[Unreleased\]/r temp_changelog.md' CHANGELOG.md.bak > CHANGELOG.md
              else
                # Prepend new content to existing changelog
                cat temp_changelog.md > CHANGELOG.md
                echo "" >> CHANGELOG.md
                cat CHANGELOG.md.bak >> CHANGELOG.md
              fi
              
              rm CHANGELOG.md.bak
            else
              mv temp_changelog.md CHANGELOG.md
            fi
            
            rm -f temp_changelog.md
          fi

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in CHANGELOG.md"
          fi

      - name: Commit and Push Changelog
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add and commit changes
          git add CHANGELOG.md
          git commit -m "docs: auto-update changelog
          
          - Generated from recent commits
          - Categorized by commit type
          - Added links to commits
          
          [skip ci]"  # Skip CI to avoid infinite loop
          
          # Push directly to current branch
          git push origin HEAD:${{ github.ref_name }}

      - name: Log Status
        run: |
          if [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
            echo "‚úÖ Changelog updated and pushed successfully!"
          else
            echo "‚ÑπÔ∏è  No new changes detected. Changelog is up to date."
          fi
